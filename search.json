[





{
"title": "Introduction",
"tags": "getting_started",
"keywords": "",
"url": "../tylmodel/home.html",
"summary": ""
},




{
"title": "Introduction",
"tags": "getting_started",
"keywords": "",
"url": "../mydoc/home.html",
"summary": ""
},







{
"title": "About the theme author",
"tags": "getting_started",
"keywords": "documentation theme, jekyll, technical writers, help authoring tools, hat replacements",
"url": "../mydoc/mydoc_about.html",
"summary": "I use this theme for sophisticated single_sourcing projects that I work on as a professional technical writer."
},




{
"title": "2. Add a new project",
"tags": "getting_started",
"keywords": "getting started, customization, beginning steps, modifying the theme, modification",
"url": "../mydoc/mydoc_adding_new_projects.html",
"summary": "You add a new project essentially by duplicating all the mydoc project files in the _data, _includes, configs, and other folders. You can add as many projects as you want in this theme."
},




{
"title": "Tooltips",
"tags": "formatting",
"keywords": "popovers, tooltips, user interface text, glossaries, definitions",
"url": "../mydoc/mydoc_adding_tooltips.html",
"summary": "You can add tooltips to any word, such as an acronym or specialized term. Tooltips work well for glossary definitions, because you don't have to keep repeating the definition, nor do you assume the reader already knows the word's meaning."
},




{
"title": "Alerts",
"tags": "formatting",
"keywords": "notes, tips, cautions, warnings, admonitions",
"url": "../mydoc/mydoc_alerts.html",
"summary": "You can insert notes, tips, warnings, and important alerts in your content. These notes are stored as shortcodes made available through the linksrefs.hmtl include."
},




{
"title": "Build arguments",
"tags": "publishing",
"keywords": "building, serving, serve, build",
"url": "../mydoc/mydoc_build_arguments.html",
"summary": "When you have a single sourcing project, you use more advanced arguments when you're building or serving your Jekyll sites. These arguments specify a particular configuration file and may build on other configuration files."
},




{
"title": "10. Configure the build scripts",
"tags": "publishing",
"keywords": "build scripts, generating outputs, building, publishing",
"url": "../mydoc/mydoc_build_scripts.html",
"summary": "You need to customize the build scripts. These script automate the publishing of your PDFs and web outputs through shell scripts on the command line."
},




{
"title": "Collections",
"tags": "content-types",
"keywords": "groups, api, structure",
"url": "../mydoc/mydoc_collections.html",
"summary": "Collections are useful if you want to loop through a special folder of pages that you make available in a content API. You could also use collections if you have a set of articles that you want to treat differently from the other content, with a different layout or format."
},




{
"title": "Commenting on files",
"tags": "navigation",
"keywords": "annotations, comments, feedback",
"url": "../mydoc/mydoc_commenting_on_files.html",
"summary": "You can add a button to your pages that allows people to add comments. Prose.io is an overlay on Github that would allow people to make comments in an easier interface."
},




{
"title": "Conditional logic",
"tags": "single_sourcing",
"keywords": "if else logic, conditions, conditional attributes, conditional filtering",
"url": "../mydoc/mydoc_conditional_logic.html",
"summary": "You can implement advanced conditional logic that includes if statements, or statements, unless, and more. This conditional logic facilitates single sourcing scenarios in which you're outputting the same content for different audiences."
},




{
"title": "5. Customize the conditions file",
"tags": "navigation",
"keywords": "single sourcing, conditions, filtering, attributes, logic",
"url": "../mydoc/mydoc_conditions_file_customization.html",
"summary": "The conditions file is included in various parts of the theme. Its purpose is to set attributes as variables that affect how the theme is constructed. The settings in this file are essential for single sourcing."
},




{
"title": "4. Set the configuration options",
"tags": "single_sourcingpublishing",
"keywords": "configuration, config, publishing options, outputs, projects",
"url": "../mydoc/mydoc_configuration_settings.html",
"summary": "The configuration file contains important settings for your project. Some of the values you set here affect the display and functionality of the theme &mdash; especially the product, platform, audience, and version."
},




{
"title": "6. Configure the sidebar",
"tags": "getting_started",
"keywords": "sidebar, accordion, yaml, iteration, for loop, navigation, attributes, conditional filtering",
"url": "../mydoc/mydoc_configure_sidebar.html",
"summary": "The sidebar and top navigation bar read their values from yml files. The navigation components are one of the most unique parts of this theme, since the navigation components are only included if they meet all of the product, audience, version, etc., values as specified in the project settings. Understanding how the sidebar works is critical to successfully using this theme."
},




{
"title": "Content reuse",
"tags": "single_sourcing",
"keywords": "includes, conref, dita, transclusion, transclude, inclusion, reference",
"url": "../mydoc/mydoc_content_reuse.html",
"summary": "You can reuse chunks of content by storing these files in the includes folder. You then choose to include the file where you need it. This works similar to conref in DITA, except that you can include the file in any content type."
},




{
"title": "3. Decide on your project&#39;s attributes",
"tags": "getting_started",
"keywords": "attributes, conditional filtering, audience, platform, product, version, output, DITA, variables",
"url": "../mydoc/mydoc_decide_on_attributes.html",
"summary": "Each project has attributes that define the audience, platform, product, version, and output. These attributes are used in generating the outputs. The attributes function as filtering conditions that determine what content gets included in the navigation."
},




{
"title": "Excluding files",
"tags": "single_sourcing",
"keywords": "exclusion, separating outputs, removing files from outputs",
"url": "../mydoc/mydoc_excluding_files.html",
"summary": "By default, all the files in your Jekyll project are included in the output (this differs from DITA projects, which don't include files unless noted on the map). If you're single sourcing, you'll need to exclude the files that shouldn't be included in the output. The sidebar doesn't control inclusion or exclusion."
},




{
"title": "FAQ layout",
"tags": "special_layouts",
"keywords": "frequently asked questions, FAQ, question and answer, collapsible sections, expand, collapse",
"url": "../mydoc/mydoc_faq.html",
"summary": "You can use an accordion-layout that takes advantage of Bootstrap styling. This is useful for an FAQ page."
},




{
"title": "Generating PDFs",
"tags": "publishingsingle_sourcingcontent-types",
"keywords": "PDF, prince, prince XML, ant, xsl fo",
"url": "../mydoc/mydoc_generating_pdfs.html",
"summary": "You can generate a PDF from your Jekyll project. You do this by creating a web version of your project that is printer friendly. You then use utility called Prince to iterate through the pages and create a PDF from them. It works quite well and gives you complete control to customize the PDF output through CSS, including page directives and dynamic tags from Prince."
},




{
"title": "1. Build the default project",
"tags": "getting_started",
"keywords": "start, introduction, begin, install, build, hello world,",
"url": "../mydoc/mydoc_getting_started.html",
"summary": "To get started with this theme, first make sure you have all the prerequisites in place; then build the theme following the sample build commands. Because this theme is set up for single sourcing projects, it doesn't follow the same pattern as most Jekyll projects (which have just a _config.yml file in the root directory)."
},




{
"title": "Glossary layout",
"tags": "formattingspecial_layouts",
"keywords": "definitions, glossaries, terms, style guide",
"url": "../mydoc/mydoc_glossary.html",
"summary": "Your glossary page can take advantage of definitions stored in a data file. This gives you the ability to reuse the same definition in multiple places. Additionally, you can use Bootstrap classes to arrange your definition list horizontally."
},




{
"title": "Help APIs and UI tooltips",
"tags": "publishingsingle_sourcingcontent-types",
"keywords": "API, content API, UI text, inline help, context-sensitive help, popovers, tooltips",
"url": "../mydoc/mydoc_help_api.html",
"summary": "You can loop through files and generate a JSON file that developers can consume like a help API. Developers can pull in values from the JSON into interface elements, styling them as popovers for user interface text, for example. The beauty of this method is that the UI text remains in the help system (or at least in a single JSON file delivered to the dev team) and isn't hard-coded into the UI."
},




{
"title": "Links",
"tags": "formattingnavigation",
"keywords": "links, hyperlinks, cross references, related links, relationship tables",
"url": "../mydoc/mydoc_hyperlinks.html",
"summary": "When creating links, although you can use standard HTML or Markdown, this approach is usually susceptible to a lot of errors and broken links. There's a URL generator that will facilitate linking to other pages in ways that ensures the links won't break."
},




{
"title": "Icons",
"tags": "formatting",
"keywords": "font icons, buttons, images, vectors, font awesome, glyphicons",
"url": "../mydoc/mydoc_icons.html",
"summary": "You can integrate font icons through the Font Awesome and Glyphical Halflings libraries. These libraries allow you to embed icons through their libraries delivered as a link reference. You don't need any image libraries downloaded in your project."
},




{
"title": "Images",
"tags": "formatting",
"keywords": "images, screenshots, vectors, svg, markdown syntax",
"url": "../mydoc/mydoc_images.html",
"summary": "You embed images using traditional HTML or Markdown syntax for images. Unlike pages, you can store images in subfolders (in this theme). This is because when pages reference the images, the references are always as subpaths, never requiring the reference to move up directories."
},




{
"title": "iTerm profiles",
"tags": "publishing",
"keywords": "iterm, terminal, build shortcuts, mac",
"url": "../mydoc/mydoc_iterm_profiles.html",
"summary": "Set up profiles in iTerm to facilitate the build process with just a few clicks. This can make it a lot easier to quickly build multiple outputs."
},




{
"title": "Knowledge-base layout",
"tags": "special_layouts",
"keywords": "knowledge base, support portal, grid, doc portal",
"url": "../mydoc/mydoc_kb_layout.html",
"summary": "This shows a sample layout for a knowledge base. Each square could link to a tag archive page. In this example, font icons from Font Awesome are enlarged to a large size. You can also add captions below each icon."
},




{
"title": "Labels",
"tags": "formatting",
"keywords": "labels, buttons, bootstrap, api methods",
"url": "../mydoc/mydoc_labels.html",
"summary": "Labels are just a simple Bootstrap component that you can include in your pages as needed. They represent one of many Bootstrap options you can include in your theme."
},




{
"title": "Link validation",
"tags": "publishing",
"keywords": "broken links, orphan links, publishing errors, validation, link validity, hyperlink issues",
"url": "../mydoc/mydoc_link_validation.html",
"summary": "Before deploying your published site, you want to ensure that you don't have any broken links. There are a few ways to check for broken links."
},




{
"title": "Navtabs",
"tags": "formatting",
"keywords": "navigation tabs, hide sections, tabbers, interface tabs",
"url": "../mydoc/mydoc_navtabs.html",
"summary": "Navtabs provide a tab-based navagation directly in your content, allowing users to click from tab to tab to see different panels of content. Navtabs are especially helpful for showing code samples for different programming languages. The only downside to using navtabs is that you must use HTML instead of Markdown."
},




{
"title": "Getting around the password prompts in SCP",
"tags": "",
"keywords": "",
"url": "../mydoc/mydoc_no_password_prompts_scp.html",
"summary": ""
},




{
"title": "Pages",
"tags": "getting_startedformattingcontent-types",
"keywords": "pages, authoring, exclusion, frontmatter",
"url": "../mydoc/mydoc_pages.html",
"summary": "This theme uses pages only, not posts. You need to make sure your pages have the appropriate frontmatter. One frontmatter tag your users might find helpful is the summary tag. This functions similar in purpose to the shortdesc element in DITA."
},




{
"title": "9. Set up Prince XML",
"tags": "publishing",
"keywords": "pdf generation, prince xml",
"url": "../mydoc/mydoc_princexml_setup.html",
"summary": "Prince XML is the utility used for creating PDFs. Though not free, this utility gets a list of links and compiles them into a PDF."
},




{
"title": "Pushing builds to server",
"tags": "publishing",
"keywords": "AWS, Amazon, command line, pushing build",
"url": "../mydoc/mydoc_push_build_to_server.html",
"summary": "You can push your build to AWS using commands from the command line. By including your copy commands in commands, you can package all of the build and deploy process into executable scripts."
},




{
"title": "Scroll layout",
"tags": "special_layouts",
"keywords": "json, scrolling, scrollto, jquery plugin",
"url": "../mydoc/mydoc_scroll.html",
"summary": "This page demonstrates how you the integration of a script called ScrollTo, which is used here to link definitions of a JSON code sample to a list of definitions for that particular term. The scenario here is that the JSON blocks are really long, with extensive nesting and subnesting, which makes it difficult for tables below the JSON to adequately explain the term in a usable way."
},




{
"title": "Search configuration",
"tags": "publishingnavigation",
"keywords": "search, json, configuration, findability",
"url": "../mydoc/mydoc_search_configuration.html",
"summary": "The search feature uses JavaScript to look for keyword matches in a JSON file. The results show instant matches, but it doesn't provide a search results page like Google. Also, sometimes invalid formatting can break the JSON file."
},




{
"title": "Series",
"tags": "content-types",
"keywords": "series, connected articles, tutorials, hello world",
"url": "../mydoc/mydoc_series.html",
"summary": "You can automatically link together topics belonging to the same series. This helps users know the context within a particular process."
},




{
"title": "Series demo 1.0",
"tags": "",
"keywords": "",
"url": "../mydoc/mydoc_seriesdemo1_0.html",
"summary": "This is the first post in the series."
},




{
"title": "Series demo 1.1",
"tags": "",
"keywords": "",
"url": "../mydoc/mydoc_seriesdemo1_1.html",
"summary": "This is the second post in the series."
},




{
"title": "Series demo 1.2",
"tags": "",
"keywords": "",
"url": "../mydoc/mydoc_seriesdemo1_2.html",
"summary": "This is the third post in the series."
},




{
"title": "Series demo 1.3",
"tags": "",
"keywords": "",
"url": "../mydoc/mydoc_seriesdemo1_3.html",
"summary": "This is the fourth post in the series."
},




{
"title": "Shuffle layout",
"tags": "special_layouts",
"keywords": "shuffle, card layout, dynamic grid, doc portal, support portal",
"url": "../mydoc/mydoc_shuffle.html",
"summary": "This layout shows an example of a knowledge-base style navigation system, where there is no hierarchy, just groups of pages that have certain tags."
},




{
"title": "Sidebar Navigation",
"tags": "getting_started",
"keywords": "sidebar, accordion, yaml, iteration, for loop, navigation, attributes, conditional filtering",
"url": "../mydoc/mydoc_sidebar_navigation.html",
"summary": "The sidebar navigation uses a jQuery component called Navgoco. The sidebar is a somewhat complex part of the theme that remembers your current page, highlights the active item, stays in a fixed position on the page, and more."
},




{
"title": "Special layouts overview",
"tags": "special_layouts",
"keywords": "layouts, information design, presentation",
"url": "../mydoc/mydoc_special_layouts.html",
"summary": "This theme has a few special layouts. Special layouts include the JS files they need directly in the page. The JavaScript for each special layout does not load by default for every page in the site."
},




{
"title": "Support",
"tags": "getting_started",
"keywords": "questions, troubleshooting, contact, support",
"url": "../mydoc/mydoc_support.html",
"summary": "Contact me for any support issues."
},




{
"title": "Supported features",
"tags": "getting_started",
"keywords": "features, capabilities, scalability, multichannel output, dita, hats, comparison, benefits",
"url": "../mydoc/mydoc_supported_features.html",
"summary": "If you're not sure whether Jekyll and this theme will support your requirements, this list provides a semi-comprehensive overview of available features."
},




{
"title": "Syntax highlighting",
"tags": "formatting",
"keywords": "rouge, pygments, prettify, color coding,",
"url": "../mydoc/mydoc_syntax_highlighting.html",
"summary": "You can apply syntax highlighting to your code. This theme uses pygments and applies color coding based on the lexer you specify."
},




{
"title": "Tables",
"tags": "formatting",
"keywords": "datatables, tables, grids, markdown, multimarkdown, jquery plugins",
"url": "../mydoc/mydoc_tables.html",
"summary": "You can format tables using either multimarkdown syntax or HTML. You can also use jQuery datatables (a plugin) if you need more robust tables."
},




{
"title": "Tag archives overview",
"tags": "navigation",
"keywords": "archives, tagging",
"url": "../mydoc/mydoc_tag_archives_overview.html",
"summary": "This is an overview to the tag archives section. Really the only reason this section is listed explicitly in the TOC here is to demonstrate how to add a third-level to the navigation."
},




{
"title": "Tags",
"tags": "navigation",
"keywords": "tags, navigation, buttons, links, association",
"url": "../mydoc/mydoc_tags.html",
"summary": "Tags provide another means of navigation for your content. Unlike the table of contents, tags can show the content in a variety of arrangements and groupings. Implementing tags in this Jekyll theme is somewhat of a manual process."
},




{
"title": "Themes",
"tags": "publishing",
"keywords": "themes, styles, colors, css",
"url": "../mydoc/mydoc_themes.html",
"summary": "You can choose between two different themes (one green, the other blue) for your projects. The theme CSS is stored in the CSS folder and configured in the configuration file for each project."
},




{
"title": "Check page title consistency",
"tags": "navigation",
"keywords": "validation, titles, page titles, inconsistency, errors",
"url": "../mydoc/mydoc_title_checker.html",
"summary": "title checker..."
},







{
"title": "7. Configure the top navigation",
"tags": "navigation",
"keywords": "bootstrap, lists, drop-down, drop down navigation, top nav bar, topnav",
"url": "../mydoc/mydoc_top_navigation.html",
"summary": "The top navigation provides either single links or a drop-down menu. There are some other features, such as a feedback email, custom menu, and popout link."
},




{
"title": "Top navigation",
"tags": "navigation",
"keywords": "custom menu, custom_menu, pop-out, frameescape, frame escape, top nav bar, topnav",
"url": "../mydoc/mydoc_top_navigation_deep_dive.html",
"summary": "The top navigation provides some additional features involving a custom menu and pop-out link that you can customize."
},




{
"title": "Troubleshooting",
"tags": "getting_started",
"keywords": "trouble, problems, support, error messages, problems, failure, error,",
"url": "../mydoc/mydoc_troubleshooting.html",
"summary": "This page lists common errors and the steps needed to troubleshoot them."
},




{
"title": "8. Customize the URL generator",
"tags": "navigation",
"keywords": "URL generator, link generator, links, hyperlinks",
"url": "../mydoc/mydoc_url_generator_customization.html",
"summary": "You need to customize the URL generator with your project's name. This generator helps you make quick links within your content."
},




{
"title": "Video embeds",
"tags": "formatting",
"keywords": "videos, youtube, vimeo, video js, video wrapper, mp4, stream",
"url": "../mydoc/mydoc_video_embeds.html",
"summary": "You can embed files with a Video JS wrapper by adding 'video: true' in the frontmatter. Alternatively, you can just fall back on the default video wrapper in the browser."
},




{
"title": "WebStorm Text Editor",
"tags": "getting_started",
"keywords": "webstorm, sublime, markdown, atom, gnome, notepad ++, textpad, bbedit",
"url": "../mydoc/mydoc_webstorm_text_editor.html",
"summary": "You can use a variety of text editors when working with a Jekyll project. WebStorm from IntelliJ offers a lot of project-specific features, such as find and replace, that make it ideal for working with tech comm projects."
},






















































null
]


